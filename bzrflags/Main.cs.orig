using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace bzrflags
{
	class MainClass
	{
		private static int _index;
		
		public static void Main (string[] args)
		{			
			int port = 0;
			if(args.Length > 0 && int.TryParse(args[0], out port))
			{
				TelnetConnection.setPort(port);
			}
			else
			{
<<<<<<< Updated upstream
				TelnetConnection.setPort(50103);
=======
				TelnetConnection.setPort(48728);
>>>>>>> Stashed changes
			}
			
			if(args.Length > 1)
			{
				switch(args[1])
				{
					case "pf":
//					_index = 0;
//			Task[] tasks = new Task[10];
//			for(int i = 0; i < 10; i++ )
//			{
//				tasks[i] = Task.Factory.StartNew(() =>
//				{
//							PFAgent pf = new PFAgent(_index);
//							pf.runAgent();
//							_index++;
//				});
//			}
//			
//			Task.WaitAll(tasks);
//						PFAgent pf = new PFAgent(0);
//						pf.runAgent();					
					break;
					case "dumb":
						DummyAgent dummy = new DummyAgent();
						dummy.runAgent(0);
					break;
				}
			}
			else
			{
				
			}
			
//			Task[] tasks = new Task[2];
//			tasks[0] = Task.Factory.StartNew(() => 
//			{
////				DummyAgent dummy = new DummyAgent();
////				dummy.runAgent(4);
//				PFAgent pf = new PFAgent(2);
//				pf.runAgent();				
//			});
//			tasks[1] = Task.Factory.StartNew (() =>
//			{
////				DummyAgent dummy2 = new DummyAgent();
////				dummy2.runAgent(5);
//				PFAgent pf2 = new PFAgent(3);
//				pf2.runAgent();
//			});
//			
//			Task.WaitAll(tasks);
			
			AttractField attract = new AttractField(0.0, 0.0, 1.0, 0.5, 100);
			RejectField reject = new RejectField(100.0, -250.0, 1.0, 0.5, 100);
			PotentialFieldsCollection fields = new PotentialFieldsCollection(new List<PotentialField> { attract, reject });
			GnuPlotGenerator.PlotMyFields("attract_reject", fields, null);
		}
		
		public static void WriteObstacles()
		{
			string obstaclesString = TelnetConnection.Connection.SendMessage("obstacles", true);
			ObstacleCollection obstacles = new ObstacleCollection(obstaclesString);
			PotentialFieldsCollection fields = new PotentialFieldsCollection(obstacles.ObstacleFields);
			GnuPlotGenerator.PlotMyFields("obstacles", fields, obstacles);
		}
	}
}
